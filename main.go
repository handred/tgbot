package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"tgbot/libs"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

func init() {
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
	}
}

func main() {
	log.Println("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	go startBot() // Telegram-–±–æ—Ç –≤ —Ñ–æ–Ω–µ
	// –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	<-c // ‚Üê –≤–∏—Å–∏–º –∑–¥–µ—Å—å, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—É—Ç Ctrl+C

	// –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞–ª–∏ Ctrl+C ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º:
	log.Println("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É...")
	// cleanup...
}

func startBot() {

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_TOKEN"))
	if err != nil {
		log.Fatal("Error NewBotAPI: ", err)
	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatal("Error getting updates: ", err)
	}

	for update := range updates {
		update := update // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ –∑–∞–º—ã–∫–∞–Ω–∏—è

		if update.CallbackQuery != nil {
			log.Printf("CallbackQuery: %+v", update.CallbackQuery)
		}

		if update.Message != nil {
			log.Printf("[%s] %s", getUserDisplayName(update.Message.From), update.Message.Text)

			// –°–æ–∑–¥–∞—ë–º apiBot –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
			apiBot := func() *libs.ApiBot {
				return libs.NewBotApi(bot, update.Message.Chat.ID)
			}

			if update.Message.Text == "/start" {
				go apiBot().SendButtons("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
				continue
			}

			youtubeCode := libs.GetCode(update.Message.Text)
			if youtubeCode != "" {
				videoURL := "https://www.youtube.com/watch?v=" + youtubeCode

				apiBot().SendText(fmt.Sprintf("–ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ %s", videoURL))

				// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
				go func() {
					err := libs.DownloadVideo(videoURL, func(msg string) {
						// –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
						apiBot().SendText(fmt.Sprintf("Progress: %s", msg))
						log.Println("Progress:", msg)
					})
					if err != nil {
						log.Printf("Download failed: %v", err)
						apiBot().SendText(fmt.Sprintf("Download failed: %v", err))
					}
				}()
			} else {
				go apiBot().Animate("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è! üéâ", 15*time.Millisecond)
			}

		}
	}
}

func getUserDisplayName(user *tgbotapi.User) string {
	if user == nil {
		return "Unknown"
	}

	if user.UserName != "" {
		return "@" + user.UserName
	}

	name := user.FirstName
	if user.LastName != "" {
		name += " " + user.LastName
	}
	return name
}
